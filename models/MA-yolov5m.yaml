# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 5  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple
anchors:  #提前定义的一些矩形框，三行，对应三个不同的特征层级  每一行有三个anchor大小，低层负责预测小目标，anchor较小，高层较大
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]    #‘from’表示该层的输入来自哪里，-1表示上一层
                                    #‘number’表示模块数量
                                    #‘module’表示层结构。eg 卷积层
                                    #‘args’表示参数。定义在各个层函数内，每一层都可能不同

  [[-1, 1, Conv, [48, 6, 2, 2]],  # 0-P1/2  （第0层的上一层输入就是RGB三通道图片） '2'经过步长为2的卷积，图片大小变为原图的二分之一
   [-1, 1, RepVGGBlock, [96, 3, 2]],  # 1-P2/4  ‘4’经过步长为2的卷积，图片大小变为上一步的二分之一，原图的四分之一
   [-1, 1, C3_EMA, [96]],              #C3: bottleneck残差结构，数量为3
   [-1, 1, RepVGGBlock, [192, 3, 2]],  # 3-P3/8
   [-1, 2, C3_EMA, [192]],
   [-1, 1, RepVGGBlock, [384, 3, 2]],  # 5-P4/16
   [-1, 3, C3_EMA, [384]],
   [-1, 1, RepVGGBlock, [768, 3, 2]],  # 7-P5/32
   [-1, 1, C3_EMA, [768]],
   [-1, 1, SPPF, [768, 5]],  # 9
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, GSConv, [384, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],      #‘upsample’上采样
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4  [-1, 6] 表示输入来自上一层与第六层   ‘concat’拼接
   [-1, 2, VoVGSCSP, [384, False]],  # 13

   [-1, 1, GSConv, [192, 1, 1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3
   [-1, 2, VoVGSCSP, [192, False]],  # 17 (P3/8-small)预测小目标
   [-1, 1, CBAM, [192]],             #18

   [-1, 1, GSConv, [192, 3, 2]],
   [[-1, 14], 1, Concat, [1]],  # cat head P4
   [-1, 2, VoVGSCSP, [384, False]],  # 21 (P4/16-medium)
   [-1, 1, CBAM, [384]],

   [-1, 1, GSConv, [384, 3, 2]],
   [[-1, 10], 1, Concat, [1]],  # cat head P5
   [-1, 2, VoVGSCSP, [768, False]],  # 25 (P5/32-large)
   [-1, 1, CBAM, [768]],

   [[18, 22, 26], 1, Decoupled_Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
